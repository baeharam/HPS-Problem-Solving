# 내가 이해한 문제내용
	* 정수 n이 주어졌을 때, n을 1,2,3의 합으로 나타내는 경우의 수를 구하는 프로그램 구현
	* n은 11보다 작은 양수
	* 더해지는 1,2,3의 순서를 고려함

# 접근 방식
	* 1,2,3을 더하는 순서에 따라 다른 방법으로 인정하기 때문에 모든 경우를 한번씩 훑어야 한다. 
	 => recursion 으로 구현
    	* 따라서 Base Case와 General Case를 각각 구현해야 하는데, 9095번 문제의 경우 
	 Base Case는 0,1,2,3 총 4가지 수 에대한 경우의 수라고 생각했다.
	 0은 더하는 것이 없으므로 0가지, 1은 1가지, 2는 2가지, 3은 4가지의 경우의 수가 있으며, 이것을 Base Case로 정의한다.
	 General Case는 4이상의 수부터 해당하는 식으로 표현해야 한다.
	 n의 경우의 수를 알기 위해서는 이미 완성되어 있는 n-1에서 1을 더해 n을 만드는 경우, n-2에서 2를 더해 n을 만드는 경우, n-3에서 3을 더해 3을 만드는 경우가 있을 수 있으므로
	 (n-0에 0을 더하는 경우의 방법은 0가지 이므로 생략한다.)
	 => f(n) = f(n-1) + f(n-2) + f(n-3) (n>=4) 이 된다.
 
# 어려웠던 점
	* Base case를 찾고 난 이후에 n을 구현하는 것이 어려웠다.
	* 아직 DP개념을 정확하게 모르는 상태라 recursion으로 문제를 풀기로 하였지만, General Case를 정의하기까지 오래걸렸다.

# 복잡도
    * 시간복잡도: 1중 loop문 2개 사용  O(2n) => O(n)
    * 공간복잡도: 크기가 n인 배열  O(n)
